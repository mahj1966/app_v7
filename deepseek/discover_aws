import collections
import boto3
import json
import os
import uuid
from datetime import datetime
from ast import literal_eval
import random
import botocore
import time
import sys
import base64
import cx_Oracle
from datetime import date
from datetime import timedelta
import subprocess

#######################


CHARSET = 'UTF-8'
resourceAccount = sys.argv[1]
resourceRegion = sys.argv[2]
resourceType = sys.argv[3]
resourceAtribute = sys.argv[4]
argument_name = sys.argv[5]
argument_value = sys.argv[6]


###################################################
### Insert EC2 ENI
###################################################
if resourceType == 'EC2_eni' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)
    ec2_instances = ec2_client.describe_network_interfaces()

    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
        connection.commit()

    sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,creation_date) '
            'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes,:creation_date)')


    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:

        cursor = connection.cursor()
        cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(ec2_instances,default=str),argument_name,argument_value,resourceAtribute,datetime.now()))
        connection.commit()
###################################################
### Insert EC2 security_groups
###################################################
if resourceType == 'EC2_sg' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)
    ec2_instances = ec2_client.describe_security_groups()

    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
        connection.commit()

    sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,creation_date) '
            'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes,:creation_date)')

    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:

        cursor = connection.cursor()
        cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(ec2_instances,default=str),argument_name,argument_value,resourceAtribute,datetime.now()))
        connection.commit()
###################################################
### Insert EC2 Volume
###################################################
if resourceType == 'EC2_Volumes' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)
    ec2_instances = ec2_client.describe_volumes()

    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
        connection.commit()
    sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,creation_date) '
            'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes,:creation_date)')

    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(ec2_instances,default=str),argument_name,argument_value,resourceAtribute,datetime.now()))
        connection.commit()
####################################################
### Insert EC2 all
###################################################
if resourceType == 'EC2' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)
    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
            cursor = connection.cursor()
            cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
            connection.commit()

    paginator = ec2_client.get_paginator('describe_instances')
    response = paginator.paginate().build_full_result()

    ec2_instance = response['Reservations']

    for instance in ec2_instance:
        sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,res_id,creation_date) '
                    'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes, :res_id,:creation_date)')
        with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
            cursor = connection.cursor()
            cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(instance['Instances'],default=str),argument_name,argument_value,resourceAtribute,str(instance['Instances'][0]['InstanceId']),datetime.now()))
            connection.commit()


####################################################
### Insert EC2 TYPE
###################################################
if resourceType == 'EC2_type' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)

    #ec2_instances = ec2_client.describe_instance_types()

    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
        connection.commit()


    paginator = ec2_client.get_paginator('describe_instance_types')
    response = paginator.paginate().build_full_result()

    ec2_instance = response['InstanceTypes']

    for instance in ec2_instance:


        sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,creation_date) '
            'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes,:creation_date)')

        with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
            cursor = connection.cursor()
            cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(instance,default=str),argument_name,argument_value,resourceAtribute,datetime.now()))
            connection.commit()

###################################################
### Insert SUBNET getInfo
###################################################

if resourceType == 'subnet_get_Info' :

    ec2_client = boto3.client('ec2',region_name=resourceRegion)

    ec2_instances = ec2_client.describe_subnets()

    sql = ("delete aws_resources_json  where trim(account_id)= :resourceAccount and trim(region)=:resourceRegion and trim(argument_name)=:argument_name and trim(argument_value)=:argument_value" )
    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql,(resourceAccount,resourceRegion,argument_name,argument_value))
        connection.commit()
    sql = ('insert into aws_resources_json(account_id,region,json_data,argument_name,argument_value,attributes,creation_date) '
            'values(:account,:region,:json_data,:argument_name,:argument_value,:attributes,:creation_date)')

    with cx_Oracle.connect(user="dms", password="password_1",
                    dsn="RDS_XEPDB1",
                    encoding="UTF-8", nencoding = "UTF-8") as connection:
        cursor = connection.cursor()
        cursor.execute(sql, (resourceAccount,resourceRegion,json.dumps(ec2_instances,default=str),argument_name,argument_value,resourceAtribute,datetime.now()))
        connection.commit()

